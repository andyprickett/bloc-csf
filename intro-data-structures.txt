Exercises

1. A line of people at an amusement park ride.

* The line is composed of members, represented as strings.
* There is a front to the line, as well as a back.
* When someone enters the line, place them at the end.
* People may leave the line whenever they see fit, and those behind them take their place.

Given the above real-world information, use an array data structure to code the following solution.

a) Use an array input: ["Vivian", "Ava", "Josh", "Patrick", "Mike"]
b) Insert a new person, "Mary" at the end of the line. In other words, you should insert Mary after Mike.
c) Find a person in line named "Josh." This function should return the position of 2 in the array, (recall that arrays are 0-based).
d) Find a person in line named "Emily." What should your function return if it does not find the item in the array?
e) What if Ava wants to allow a friend, "Melissa", to cut in line in front of her? How would you code this so Melissa appears before Ava?
f) If Patrick wants to leave the line, how would you delete him from the array?

>

Clunky, but, maybe a tiny bit fun.

const processLine = (line) => {
  const positionInLine = (name) => {
    let indexOfPerson = line.indexOf(name);
    if (indexOfPerson >= 0) {
      console.log(`${name} was found at position ${indexOfPerson}!`)
    } else {
      console.log(`${name} wasn't found in the line!`)
    }
    return indexOfPerson;
  }

  return {
    addToEnd: (name) => {line.push(name)},
    myPosition: (name) => {positionInLine(name)},
    cutBeforeMe: (me, cutter) => {
      let meSpot = positionInLine(me);
      if (meSpot >= 0) {
        line.splice(meSpot, 0, cutter);
        console.log(`${cutter} just cut in line before ${me}!`);
      } else {
        console.log("Did you get the names right?");
      }
    },
    getOutOfLine: (name) => {
      let leaverSpot = positionInLine(name);
      if (leaverSpot >= 0) {
        line.splice(leaverSpot, 1);
        console.log(`See ya, ${name}!`);
      }
    },
    printLine: () => {console.log(line.join(', '))}
  }
}

const lineData = ["Vivian", "Ava", "Josh", "Patrick", "Mike"];
const lineMachine = processLine(lineData);
lineMachine.printLine();

lineMachine.addToEnd("Mary");
lineMachine.printLine();

lineMachine.myPosition("Josh");
lineMachine.myPosition("Emily");

lineMachine.cutBeforeMe("Ava", "Melissa");
lineMachine.printLine();
lineMachine.cutBeforeMe("Emily", "Melissa");

lineMachine.getOutOfLine("Patrick");
lineMachine.printLine();
lineMachine.getOutOfLine("Emily");

console.log(lineData);

2. Provide another real-world example that you can model using a data structure.

>

Maybe...a list of electric guitar brands carried by Chicago Music Exchange?

3. How would your data structure allow developers to access and manipulate the data?

>

Not sure how to answer this, but I tried to demonstrate it somewhat above with the 'line' example. In the case of a guitar brand list, probably sorting, finding, adding, inserting without resorting, deleting would be all that a simple list would be good for.

